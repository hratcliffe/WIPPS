SDF stuff exists in Fortran, C, Python, IDL
No writing yet

C or Fortran can be paralleised easily. Can also trivially parallise in space blocks

Inputs:
wave spectrum E and/ or B Lets use SDF format for the experience eh?
In which case, might almost as well rewrite the stuff to process. 
Fast fft in C?

Frequency axis
What do we do with wavenumber? Our spectra can just be interpolated onto a freq axis.

plasma parameters, probably from file

Angular range, energy range etc etc for output

-------------------------------------------------------------

Use Albert (2005) equations, numbers given

Whatever we do, probably make/find integrator routine which takes integrand and axis/d x, possibly jacobian for angles etc?

Need to calc ERF for Gaussians (is in math.h?)
Sin and cos also in math.h
Derivatives

FFTW

Array type with an indexing function

class array{


}

Maybe data type class of 1-d array, sizes, index fns and axes?

-------------------------------------------------------------


Read E and/or B

FFT on subdivisions in space, time range
Make powers of 2, 3, 5 for speed

extract spectra, and angular dependence thereof

calc refractive index as fn of space, angle

Calc D
  

Integrate in wave freq, and in tan of wave angle

Do bounce averaging

++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[07/10/2015 16:31:40] Heather Ratcliffe: We’re calculating these particle diffusion coefficients.
[07/10/2015 16:32:09] Heather Ratcliffe: They depend at base on the B (or E) field spectrum, so I have a spectrum class since there’s some work in deriving that.
[07/10/2015 16:32:27] Christopher Brady: Yep.
[07/10/2015 16:33:02] Heather Ratcliffe: I think it’s simplest to add what amounts to a plasma class, which holds all the info on the plasma conditions and dispersion, and can return sort-of the plasma dispersion roots.
[07/10/2015 16:33:17] Christopher Brady: Yep, that would make sense.
[07/10/2015 16:33:32] Heather Ratcliffe: So we can change for e.g. the background density, etc etc, and unlikely but possibly, from the cold-plasma calculation.
[07/10/2015 16:34:02] Christopher Brady: Yep, although you'd have to rescale the underlying PIC simulation results of course.
[07/10/2015 16:34:33] Heather Ratcliffe: I meant when we change the underlying parameters, but I think we can also rescale to some extent yes.
[07/10/2015 16:34:50] Heather Ratcliffe: And it needs to be intelligent enough to select the correct root and some such things.
[07/10/2015 16:35:03] Christopher Brady: Yep, OK. That makes sense as a class then.
[07/10/2015 16:36:03] Heather Ratcliffe: We already have the reader class to interface with sdf, because it would be nice to extend to e.g. just set up a test spectrum.
[07/10/2015 16:36:32] Heather Ratcliffe: And the last one is then the coefficient class itself. Which takes input from spectrum and plasma, and outputs a diffusion coefficient. Possibly with some other outsourcing.
[07/10/2015 16:36:35] Heather Ratcliffe: Sound sane?
[07/10/2015 16:37:18] Christopher Brady: Yep, that makes sense. You might have to be a bit careful about who owns what to keep it under control, but it's a good approach in general.
[07/10/2015 16:37:50] Heather Ratcliffe: Yup. I think in the end most of them will be owned by main, because the user input is what determines where to get everything from.
[07/10/2015 16:38:16] Heather Ratcliffe: So main sort of runs like:
[07/10/2015 16:38:26] Heather Ratcliffe: make class instances
[07/10/2015 16:38:34] Heather Ratcliffe: get plasma parameters from file
[07/10/2015 16:38:43] Heather Ratcliffe: get B field source from user.
[07/10/2015 16:38:58] Heather Ratcliffe: obtain B field spectrum
[07/10/2015 16:39:08] Heather Ratcliffe: initiate plasma dispersion solver
[07/10/2015 16:39:30] Heather Ratcliffe: initiate diffusion coefficient
[07/10/2015 16:39:33] Heather Ratcliffe: call main solver
[07/10/2015 16:39:41] Heather Ratcliffe: call output routines.
[07/10/2015 16:39:46] Heather Ratcliffe: Clean up and exit.
[07/10/2015 16:39:47] Christopher Brady: Yep, that makes sense.
[07/10/2015 16:40:38] Christopher Brady: You could make an argument for the diffusion class to own everything because all that you want out of it is the diffusion coefficient, but since the program doesn't then do anything else with it, it's an academic point.
[07/10/2015 16:40:48] Heather Ratcliffe: And once I get the MPI the first line, and lines 4-7 will be dependent on the domain decomposition.
[07/10/2015 16:41:26] Christopher Brady: Yep. All makes sense.
[07/10/2015 16:41:36] Heather Ratcliffe: Not sure how that will be done, but it can be done later, as it just amounts to instantiating multiple things with different parameters, and delegating the work.
[07/10/2015 16:42:18] Heather Ratcliffe: Possibly given that File I/O won’t be the limiting step, we use core 0 to do that and avoid parallel IO, and then subdivide from there.
[07/10/2015 16:42:21] Christopher Brady: Yep, from your description of the parallelism that sounds fine.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##############################################
ToDo

3-D arrays

Work out SDF read etc

File output/save

FFTs

Integrator

Document!! w. Doxygen


Grep for TODO and NB for notes etc


#	sed -e '/s'
#  sed -e $$'s,.h /,.h \\\\\\n /,g;s,.cpp /,.cpp \\\\\\n /,g;s,.h i,.h \\\ \\\n i,g;s,.cpp i,.cpp \\\\\\n i,g' out.txt &>out2.txt; \
#  sed -e $$'s:[ ]\{1,\}:\\\ \\\n:g' out.txt &>out2.txt; \
#  sed -e $$'s,.h /,.h \\\ \\\n /,g;s,.cpp /,.cpp \\\ \\\n /,g;s,.h $(I),.h \\\ \\\n $(I),g;s,.cpp $(I),.cpp \\\ \\\n $(I),g' depout00001.txt &>depout00002.txt; \

#	@for var in $(SOURCE); do $(CC) $(INCLUDE) -M $$var; sed -e $'s,.h /,\\\n,g' out.txt &> out2.txt; \
 #   done

  #sed -e '/Xcode.app/d;/boost/d;/SDF/d;/mpio/d;/mpicxx/d;/fftw3/d' out.txt >>dependencies.log 2>&1; \
  #  done
  #echo "a,b" | sed -e $'s/,/\\\n/g'
#	@for var in $(SOURCE); do $(CC) $(INCLUDE) -M $$var &> out.txt; sed -e $'s,.h /,\\\n,g' out.txt &>out2.txt; \
  #done
#echo_deps :
#	@for var in $(SOURCE); do $(CC) $(INCLUDE) -M $$var &> out.txt; \
 # sed -e '/Xcode.app/d;/boost/d;/SDF/d' out.txt >>dependencies.txt 2>&1; \
  #  done


