//
//  main.h
//  
//
//  Created by Heather Ratcliffe on 18/09/2015.
//
//

#ifndef ____main__
#define ____main__

//#include <stdio.h>


#endif /* defined(____main__) */

//The following is Doxygen mainpage docs
/*! \mainpage notitle
 
 * \section Introduction
 * This program post-processes EPOCH PIC code output files into magnetospheric particle diffusion coefficients due to Whistler mode wave particle interactions.
 * It is broadly divided into a number of pieces, as follows
 *
 * \subsection setup Main Setup
 * Overall setup is via command line arguments, detailed by the ./main -h option. These specify the domain, fields and file names. On multiple processors, each handles several space blocks sequentially. Physical parameters are extracted from the deck.status file generated by the code. The plasma is defined in class plasma which sets the number of components and their number ratios.
 * \subsection Data Arrays
 * Data arrays are a specialised class containing data, axes and information. Data should only be directly accessed when copying as the internal layout may change. Get/set_element methods are provided for accessing specific parts.
 * \subsection FileIO SDF IO
 * SDF file reading uses the SDF C libraries and extracts the selected field and axes from files sequentially, taking a suitable space subarray if necessary. It fills a data_array instance with this, which can then be worked with.
 * \subsection FFT Fourier Transforms and Special Functions
 * FFTs are handled by the FFTW routines in suitable precision (float or double). Special functions are provided by Boost.
 * \subsection contr Spectrum and D generation
 * The main calculations involving extracting a spectrum from the data read, and turning this into a diffusion coefficient, according to equations in Albert 2005 and/or Lyons 1972. Control of this process, matching spectra and coefficients and providing plasma parameters, is managed by the controller class.
 * \section docs This Documentation
 * These docs describe all classes and methods under the classes section. Helper functions, constants etc are grouped under modules.
 * \section build Building or Editing the Code
 * Build using make. If input data is type float, use make TYPE=float to build with correct libraries. 
 *Any changes to code include files or addition of files will change dependencies. In this case run make echo_deps before a clean build
 *
 *\section test Integrated Testing
 * All (hopefully) significant (copout!) parts of the code should be covered by inbuilt tests. These are defined in test.cpp and cover a mixture of unit testing, science testing and library integration tests. To run the tests, clean build with make MODE=test and run. To add tests, see class \ref tests. Consider adding tests for any significant additions or changes, and running the existing ones ditto.
 *
 */

